fermeture_volets:
  alias: Fermeture volets
  sequence:
    - service: cover.close_cover
      data:
        entity_id: group.all_covers

ouverture_volets:
  alias: Ouverture volets
  sequence:
    - service: cover.open_cover
      data:
        entity_id: group.all_covers

positionner_volets:
  alias: Positionner les volets
  sequence:
    - service: cover.set_cover_position
      data_template:
        entity_id: group.all_covers
        position: "{{ position }}"

fermeture_volets_nuit:
  alias: Fermeture volets nuit
  sequence:
    - delay: 00:19
    - condition: state
      entity_id: input_boolean.cover_mode
      state: 'on'
    - service: script.notify
      data_template:
        #title: "{{ states.input_text.notifications_generic_title.state }}"
        message: "Les volets vont se fermer" 
    - delay: 00:00:30 
    - service: script.fermeture_volets

eteindre_prise_garage:
  alias: Eteindre prise du garage
  sequence:
    - condition: numeric_state
      entity_id: sensor.broadlink_spx_power_sensor
      below: 10
    - service: switch.turn_off
      data:
        entity_id: switch.prise_garage

turn_off_tv:
  alias: Minuteur Chromecast
  sequence:
    - condition: numeric_state
      entity_id: input_number.tv_timer
      above: 0
    - delay: '00:{{ states.input_number.tv_timer.state | int }}:00'  
    - service: media_player.turn_off
      data:
        entity_id: media_player.chromecast_salon 
    - service: input_number.set_value
      data:
        entity_id: input_number.tv_timer
        value: 30

notify_car_charging:
  alias: notifier chargement de la voiture
  sequence:
  - service: script.notify
    data_template:
      #title: "{{ states.input_text.notifications_generic_title.state }}"
      message: "Voiture en charge : {{states.sensor.charge_estimated_time_hour.state }}h"

notify_car_charged:
  alias: notifier fin de chargement de la voiture
  sequence:
  - service: script.notify
    data_template:
      #title: "{{ states.input_text.notifications_generic_title.state }}"
      message: "Voiture chargée en : {{states.sensor.day_car_charge.attributes.value }}"

turn_on_cameras:
  alias: Allumer caméras
  sequence:
    - service: switch.turn_on
      entity_id: switch.neo_coolcam_power_plug_12a_switch_2    
    - service: input_boolean.turn_on
      entity_id: input_boolean.camera_sejour_state

turn_off_cameras:
  alias: Eteindre caméras
  sequence:
    - service: switch.turn_off
      entity_id: switch.neo_coolcam_power_plug_12a_switch_2    
    - service: input_boolean.turn_off
      entity_id: input_boolean.camera_sejour_state

notify_marc_roads:
  alias: Notifications des routes
  sequence:
    - service: script.notify
      data_template:
        # title: "Itinéraires"
        message: "SII: {{ states.sensor.sii_roads.state }}\nOF: {{ states.sensor.ouest_france_roads.state }}"

turn_on_light_if_cover_closed:
  alias: Allumage des lumières en rentrant
  sequence:
    - condition: state
      entity_id: cover.fibaro_system_fgrm222_roller_shutter_controller_2_level
      state: 'closed'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
    - service: light.turn_on
      entity_id: light.spots_led
    - service: switch.turn_on
      entity_id: switch.neo_coolcam_power_plug_12a_switch_3

turn_off_all_lights:
  alias: Extinction de toutes les lumières
  sequence:
    - service: homeassistant.turn_off
      entity_id: group.all_lights
    - service: switch.turn_off
      entity_id: switch.neo_coolcam_power_plug_12a_switch_3
    - service: switch.turn_off
      entity_id: switch.neo_coolcam_power_plug_12a_switch

notify:
  alias: notificateur slack
  sequence: 
    service: notify.slack
    data_template:
      message: ""
      target: 
        - "{{target|default('#domotique')}}"
      data:
        attachments:
          - title: "{{title|default('')}}"
            text: "{{message}}"
            color: "{{criticity|default('#03a9f4')}}"

test_notify:
  sequence:
    service: script.notify
    data_template:
      #title: "TEST"
      message: "Ceci est un test :construction_worker:"