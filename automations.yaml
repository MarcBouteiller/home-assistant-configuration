- id: coucher_de_soleil
  alias: Coucher de soleil
  trigger:
  - event: sunset
    platform: sun  
  action:
    - delay: 00:19
    - service: script.sunset_closing_covers

- id: closing_covers_delay_answer
  alias: Ajout délai fermeture volets
  trigger:
    - platform: webhook
      webhook_id: haslack
  action:
    # Log the slack action
    - service: system_log.write
      data_template:
        message: "{{ trigger.data.payload }}"
    # Set the value 
    - service: input_number.set_value
      data_template:
        entity_id: input_number.closing_covers_delay
        value: "{{ trigger.data.payload | regex_findall_index('\"value\":\"(.*?)\"', 0) | float }}"
    # Answer the slack action
    - service: script.callback_covers_notification
      data_template:
        callback_url: "{{ trigger.data.payload | regex_findall_index('\"response_url\":\"(.*?)\"', 0) | regex_replace('%5C') | regex_replace('/{3}','') | replace('\\/', '/')  }}"
        message: >
          {% if (states.input_number.closing_covers_delay.state)|int > 0 %}
            Ok ! Je repousse de {{states.input_number.closing_covers_delay.state}} min.
          {% elif is_state('input_number.closing_covers_delay', 0) %}
            Ok ! On se laisse faire :)
          {% else %}
            On laisse ouvert ! :)
          {% endif %}

- id: veilleuse
  alias: Veilleuse
  trigger:
    platform: state
    entity_id: binary_sensor.fibaro_system_fgms001_motion_sensor_sensor
    from: 'off'
    to: 'on'  
  condition:
    condition: state
    entity_id: input_boolean.veilleuse
    state: 'off'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.veilleuse
    - service: light.turn_on
      data:
        entity_id: group.leds_livingroom
        brightness: 5
        color_name: orange
    - delay: 00:02:30
    - service: light.turn_off
      entity_id: group.leds_livingroom
    - service: input_boolean.turn_off
      entity_id: input_boolean.veilleuse

- id: night_mode_on
  alias: Déclenchement Mode nuit
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    to: 'on'
  action:
    - service: light.turn_off
      entity_id: 
        - light.spots_led
        - light.livingrooms_led
    - service: switch.turn_off
      entity_id: switch.neo_coolcam_power_plug_12a_switch_3
    - service: homeassistant.turn_on
      entity_id: automation.veilleuse

- id: night_mode_off
  alias: Extinction Mode nuit
  trigger:
    platform: state
    entity_id: input_boolean.night_mode
    to: 'off'
  action:
  - service: homeassistant.turn_off
    entity_id: automation.veilleuse
  - service: switch.turn_on
    entity_id: switch.neo_coolcam_power_plug_12a_switch_3
  - service: light.turn_on
    data:
      entity_id: light.livingrooms_led
      brightness: 3
      color_temp: 361

- id: workday_night_mode_off
  alias: Lever
  trigger:
    platform: time
    at: '07:00:00'
  condition:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: 'on'
    - condition: state
      entity_id: input_boolean.holiday_mode
      state: 'off'
  action: 
  - service: input_boolean.turn_off
    entity_id: input_boolean.night_mode
    
- id: toggle_force_presence_mode
  alias: force presence
  trigger:
    platform: state
    entity_id: input_boolean.force_presence
    from: 'off'
    to: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.force_away

- id: toggle_force_away_mode
  alias: force absence
  trigger:
    platform: state
    entity_id: input_boolean.force_away
    from: 'off'
    to: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.force_presence

- id: leave_home
  alias: Absence
  trigger:
    platform: template
    value_template: "{{ (is_state('binary_sensor.prob_presence_mode', 'off') and is_state('input_boolean.force_presence', 'off')) or is_state('input_boolean.force_away', 'on') }}"
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.away_mode

- id: coming_home
  alias: Retour
  trigger:   
     platform: template
     value_template: "{{ (is_state('binary_sensor.prob_presence_mode', 'on') or is_state('input_boolean.force_presence', 'on')) and is_state('input_boolean.force_away', 'off') }}"
  action:
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.away_mode

- id: start_power
  alias: Allumage prise
  trigger:
    platform: time
    at: '22:00:00'
  action:
    - service: switch.turn_on
      entity_id: switch.prise_garage
    - delay: 00:05:00
    - service: script.eteindre_prise_garage
    - condition: state
      entity_id: input_boolean.garage_charging
      state: 'off'
    - service: script.notify
      data_template:
        criticity: warning
        message: "La voiture n'est pas branchée !"

- id: car_charging
  alias: Recharge voiture
  trigger:
    platform: numeric_state
    entity_id: sensor.power_prise_garage
    above: 1500
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.garage_charging
    - service: script.notify_car_charging
    - delay: 
        minutes: "{{states.sensor.charge_estimated_time_minute.state}}"
    - service: switch.turn_off
      entity_id: switch.prise_garage

- id: car_charged
  alias: Voiture chargée
  trigger:
    platform: numeric_state
    entity_id: sensor.power_prise_garage
    below: 500
  condition:
    - condition: state
      entity_id: input_boolean.garage_charging
      state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.garage_charging
    - delay: 00:01:00
    - service: script.eteindre_prise_garage
    - service: script.notify_car_charged

- id: main_cover_opened
  alias: Ouverture du volet salon
  trigger:
    platform: state
    entity_id: cover.fibaro_system_fgrm222_roller_shutter_controller_2_level
    to: 'open'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.night_mode
    - service: light.turn_off
      entity_id: 
        - light.livingrooms_led
        - light.spots_led
    - service: switch.turn_off
      entity_id: switch.neo_coolcam_power_plug_12a_switch_3

- id: desk_cover_opened
  alias: Ouverture du volet bureau
  trigger:
    platform: state
    entity_id: cover.fibaro_system_fgrm222_roller_shutter_controller_2_level_8
    to: 'open'
  action:
    - service: light.turn_off
      entity_id: 
        - light.bureau

- id: ha_start
  alias: Démarrage Home Assistant
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: script.notify
      data_template:
        message: "{{ states.input_text.notifications_ha_start.state }}"
        target: '#monitoring'

- id: ha_stop
  alias: Arrêt Home Assistant
  trigger:
    - platform: homeassistant
      event: shutdown
  action:
    - service: script.notify
      data_template:
        target: "#monitoring"
        message: "{{ states.input_text.notifications_ha_stop.state }}"

- id: away_mode_activate
  alias: Absence activée
  trigger:
    - platform: state
      entity_id: input_boolean.away_mode
      from: 'off'
      to: 'on'
  action:
    - service: script.notify
      data_template:
        message: "{{ states.input_text.notifications_message_away_mode_on.state }}"
    - service: script.turn_on_cameras
    - service: script.turn_off_all_lights

- id: away_mode_deactivate
  alias: Absence désactivée
  trigger:
    - platform: state
      entity_id: input_boolean.away_mode
      from: 'on'
      to: 'off'
  action:
    - service: script.turn_off_cameras
    - service: script.turn_on_light_if_cover_closed
    - service: script.notify
      data_template:
        message: "{{ states.input_text.notifications_message_away_mode_off.state }}"

- id: presence_detection
  alias: Detection de présence
  trigger:
    platform: state
    entity_id: binary_sensor.fibaro_system_fgms001_motion_sensor_sensor
    from: 'off'
    to: 'on'
  condition:
    - condition: state
      entity_id: input_boolean.away_mode
      state: 'on'
  action:
    - service: camera.snapshot
      data:
        entity_id: camera.salon
        filename: "tmp/snap_{{now()}}.jpg"    
    - service: script.notify
      data_template:
        title: "{{ states.input_text.notifications_title_presence.state }}"
        message: "{{ states.input_text.notifications_message_presence.state }}"

- id: opening_cover_at_morning_away
  alias: Ouverture matinale des volets (Absence)
  trigger:
    platform: time
    at: '09:00:00'
  condition:
    - condition: state
      entity_id: input_boolean.away_mode
      state: 'on'
    - condition: state
      entity_id: cover.fibaro_system_fgrm222_roller_shutter_controller_2_level
      state: 'closed'
    - condition: state
      entity_id: input_boolean.cover_mode
      state: 'on'
  action:
    - service: script.positionner_volets
      data_template:
        position: 18 
    - condition: template
      value_template: '{{ (states.sensor.dark_sky_daytime_high_temperature_1.state|float) < (states.input_number.open_cover_temperature_treshold.state|float) }}'
    - service: script.ouverture_volets

- id: netflix_mode
  alias: Mode Netflix
  trigger:
    platform: state
    entity_id: sensor.cast_app_name
    to: 'Netflix'
  condition:
    condition: time
    after: '20:30:00'
  action:
    - service: light.turn_off
      data:
        entity_id: 
          - light.spots_led
          - light.livingrooms_led
    - service: switch.turn_on
      entity_id: switch.neo_coolcam_power_plug_12a_switch_3

- id: nuit_chambre_martin
  alias: Extinction lumière Martin
  trigger:
    platform: time
    at: '20:45:00'
  action:
    - service: switch.turn_off
      entity_id: switch.neo_coolcam_power_plug_12a_switch

- id: notify_route_marc
  alias: Notification de la route (Marc)
  trigger:
    platform: time
    at: '08:20:00'
  condition:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: 'on'
    - condition: state
      entity_id: input_boolean.holiday_mode
      state: 'off'
  action:
    - service: script.notify_marc_roads

- id: remote_night_mode_on
  alias: Mode nuit Télécommande
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data: 
      entity_id: zwave.hank_hkzw_scn04_scene_controller
      scene_id: 1
      scene_data: 0
  action:
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.night_mode

- id: remote_open_cover
  alias: Ouverture volets Télécommande
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data: 
      entity_id: zwave.hank_hkzw_scn04_scene_controller
      scene_id: 3
      scene_data: 2
  action:
    - service: cover.open_cover
      data:
        entity_id: all

- id: remote_spot_management_off
  alias: Turn off 
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data: 
      entity_id: zwave.hank_hkzw_scn04_scene_controller
      scene_id: 4
      scene_data: 2
  action:
    - service: light.turn_off
      data:
        entity_id: light.spots_led

- id: remote_spot_management_next
  alias: Remote change spot lights
  trigger:
    platform: event
    event_type: zwave.scene_activated
    event_data: 
      entity_id: zwave.hank_hkzw_scn04_scene_controller
      scene_id: 4
      scene_data: 0
  action:
    - service: input_select.select_next
      data:
        entity_id: input_select.spots_state

- id: spot_management
  alias: Gestion des spots
  trigger:
    platform: event
    event_type: state_changed
    event_data:
      entity_id: input_select.spots_state
  action:
    - service: light.turn_on
      entity_id: light.spots_led
      data_template:
        brightness_pct: "{{states.input_select.spots_state.state|int}}"

- id: low_temperature_alert
  alias: Alerte basse température
  trigger:
    platform: template
    value_template: "{{ (states.sensor.fibaro_system_fgms001_motion_sensor_temperature.state|float) <= (states.input_number.low_alert_temperature.state|float) }}"
  action:
    - service: script.notify_low_temperature

- id: high_temperature_alert
  alias: Alerte haute température
  trigger:
    platform: template
    value_template: "{{ (states.sensor.fibaro_system_fgms001_motion_sensor_temperature.state|float) >= (states.input_number.high_alert_temperature.state|float) }}"
  action:
    - service: script.notify_high_temperature

- id: notify_package_in_transit
  alias: Notifier colis en cours
  trigger:
    platform: state
    entity_id: sensor.seventeentrack_packages_in_transit
  condition:
    - condition: template
      value_template: '{{trigger.to_state.state|int > 0 and trigger.to_state.state|int > trigger.from_state.state|int }}'
  action:
    - service: script.notify
      data_template:
        criticity: success
        message: "Un nouveau colis est en chemin !"

- id: notify_package_delivered
  alias: Notifier colis livre
  trigger:
    platform: state
    entity_id: sensor.seventeentrack_packages_delivered
  condition:
    - condition: template
      value_template: '{{trigger.to_state.state|int > 0 and trigger.to_state.state|int > trigger.from_state.state|int }}'
  action:
    - service: script.notify
      data_template:
        criticity: success
        message: "Un colis vient d'être livré !"


- id: notify_package_undelivered
  alias: Notifier colis non livre
  trigger:
    platform: state
    entity_id: sensor.seventeentrack_packages_undelivered
  condition:
    - condition: template
      value_template: '{{trigger.to_state.state|int > 0 and trigger.to_state.state|int > trigger.from_state.state|int }}'
  action:
    - service: script.notify
      data_template:
        criticity: warning
        message: "Un colis n'a pas été remis..."

- id: notify_package_readytobepickedup
  alias: Notifier colis livré en relais
  trigger:
    platform: state
    entity_id: sensor.seventeentrack_packages_ready_to_be_picked_up
  condition:
    - condition: template
      value_template: '{{trigger.to_state.state|int > 0 and trigger.to_state.state|int > trigger.from_state.state|int }}'
  action:
    - service: script.notify
      data_template:
        criticity: success
        message: "Un colis est en attente de retrait !"

- id: open_desk_cover_intent
  alias: Ouverture volet bureau intent
  trigger:
    platform: event
    event_type: rhasspy_SetCoverState
    event_data:
      name: bureau
      state: ouvre
  action:
    - service: cover.open_cover
      entity_id: cover.fibaro_system_fgrm222_roller_shutter_controller_2_level_8
